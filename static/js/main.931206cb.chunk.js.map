{"version":3,"sources":["reducers/comment.js","reducers/index.js","sharedFunctions/types.js","sharedFunctions/helper.js","components/shared/blog.js","components/shared/button.js","components/shared/postComment.js","components/shared/singleComment.js","components/shared/comment.js","containers/index.js","sharedFunctions/config.js","sagas/comment.saga.js","sagas/index.js","index.js"],"names":["INITIAL_STATE","loading","comments","shouldUpdate","rootReducer","combineReducers","CommentingReducer","state","action","type","selected","comment","StateComments","console","log","push","result","blog","BlogComponent","className","title","body","ButtonComponent","onClickFunction","label","onClick","PostCommentComp","post","useState","setComment","value","placeholder","onChange","ev","target","trim","length","alert","SingleCommentComponent","Comment","style","height","window","innerHeight","overflow","map","index","key","MainPage","props","postComment","isMenuOpen","selectionObj","setState","open","isOpen","getSelection","anchorNode","wholeText","substring","baseOffset","extentOffset","refParagraph","React","createRef","refCode","this","getComments","selectionRef","background","color","width","onStateChange","disableAutoFocus","id","disableCloseOnEsc","noOverlay","customBurgerIcon","elastic","left","ref","contentEditable","suppressContentEditableWarning","onInput","onChangeText","Component","connect","dispatch","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","postCommentAsync","getCommentAsync","db","Firebase","initializeApp","firestore","collection","add","put","takeLatest","get","then","querySnapshot","forEach","doc","data","rootSaga","all","persistConfig","storage","sagaMiddleware","createSagaMiddleware","middleware","enhancers","applyMiddleware","persistedReducer","persistReducer","store","createStore","compose","persistor","persistStore","rootElement","document","getElementById","run","render","path","exact","component","HomePage"],"mappings":"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","file":"static/js/main.931206cb.chunk.js","sourcesContent":["import {\n    POST_COMMENT_ASYNC,\n    GET_COMMENT_ASYNC,\n} from '../sharedFunctions/types';\nconst INITIAL_STATE = {\n    loading: true,\n    comments: [],\n    shouldUpdate: false\n}\n\nexport default function (state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case POST_COMMENT_ASYNC:\n            const {selected, comment} = action\n            let StateComments = state.comments\n            console.log(action,'ac')\n            StateComments.push({\n                \"body\" : comment,\n                \"selected\" : selected\n            })\n            console.log(StateComments, 'as')\n            return {\n                ...state,\n                comments: StateComments,\n                shouldUpdate: !state.shouldUpdate\n            };\n\n        case GET_COMMENT_ASYNC:\n            return {\n                ...state,\n                comments: action.result\n            };\n        default:\n    }\n    return state;\n}","import {\n  combineReducers\n} from 'redux';\nimport CommentingReducer from './comment';\n\nconst rootReducer = combineReducers({\n    CommentingReducer\n});\n\nexport default rootReducer;","\n\nexport const LOADING = 'loading'\nexport const POST_COMMENT = 'POST_COMMENT'\nexport const GET_COMMENT_ASYNC = 'GET_COMMENT_ASYNC'\nexport const GET_COMMENT = 'GET_COMMENT'\nexport const POST_COMMENT_ASYNC = 'POST_COMMENT_ASYNC'\n\n\n\n\n\n\n\n\n","export const emptyString = ''\nexport const loadingString = 'Loading...'\n\nexport const blog = {\n  'title' : 'Commenting System',\n  'body' : 'Select here any word and comment on that word.. Feel free to contact for any queries.... Select here any word and comment on that word.. Feel free to contact for any queries.....  Select here any word and comment on that word.. Feel free to contact for any queries..   Select here any word and comment on that word.. Feel free to contact for any queries.....Select here any word and comment on that word.. Feel free to contact for any queries..   Select here any word and comment on that word.. Feel free to contact for any queries..   Select here any word and comment on that word.. Feel free to contact for any queries..  Select here any word and comment on that word.. Feel free to contact for any queries..   Select here any word and comment on that word.. Feel free to contact for any queries.. Select here any word and comment on that word.. Feel free to contact for any queries.. Select here any word and comment on that word.. Feel free to contact for any queries.. Select here any word and comment on that word.. Feel free to contact for any queries..Select here any word and comment on that word.. Feel free to contact for any queries..  Select here any word and comment on that word.. Feel free to contact for any queries..  Select here any word and comment on that word.. Feel free to contact for any queries..  Select here any word and comment on that word.. Feel free to contact for any queries..  Select here any word and comment on that word.. Feel free to contact for any queries..'\n}\n\nexport  const buttonValue = (condition, string1, string2) => {\n  return condition ? string1 : string2\n}\nexport const getSelectedData = (selectionObj) => {\n  return  selectionObj.anchorNode.wholeText ? selectionObj.anchorNode.wholeText.substring(selectionObj.baseOffset, selectionObj.extentOffset) : ''\n  }","import React from \"react\";\n\nexport const BlogComponent = ({ blog }) => {\n  return (\n    <div className=\"blog\">\n      <h3>{blog.title}</h3>\n      <p>{blog.body}</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nconst ButtonComponent = ({ onClickFunction, label }) => {\n  const onClickFunctionHandler = () => {\n    if (onClickFunction) {\n      onClickFunction();\n    }\n  };\n  return (\n    <div>\n      <button\n        className=\"btn btn-success\"\n        onClick={() => onClickFunctionHandler()}\n      >\n        {label}\n      </button>\n    </div>\n  );\n};\n\nexport default ButtonComponent;\n","import React, { useState } from \"react\"; \nimport Button from './button'\n\n const PostCommentComp = ({ post, selected}) => {\n  const [comment, setComment] = useState('');\n  const postComment = () => {\n    comment.trim().length ? post(comment,selected) : alert('please enter comment before posting')\n    setComment('')\n  }\n    return (\n     <div className='row'>\n\n        <div className='col-md-8'>\n        <textarea\n          value={comment}\n          className=\"postText\"\n          placeholder=\"comment here\"\n          onChange={ev => setComment(ev.target.value)}\n        />\n        </div>\n        <div className='col-md-4 MarginTop'>\n        <Button onClickFunction={() => postComment()} label=\"comment\" />   \n        </div>\n     </div>\n    );\n  };\n\n  export default PostCommentComp","import React from \"react\"; \n\n const SingleCommentComponent = ({ comment}) => {\n    return (\n     <div className='comment'>\n       <h3><i>{comment.selected}</i></h3>\n    <p>{comment.body}</p>\n    </div>\n    );\n  };\n\n  export default SingleCommentComponent","import React from \"react\";\nimport PostCommentComp from \"./postComment\";\nimport SingleComment from \"./singleComment\";\n\nexport const Comment = ({ comments, post, selected }) => {\n  return (\n    <div className=\"\">\n      <div\n        style={{ height: window.innerHeight - 250, overflow: \"scroll\" }}\n        className=\"row blog\"\n      >\n        <ol>\n        {comments\n          ? comments.map((comment, index) => {\n              return <li>\n                <SingleComment key={index} comment={comment} />\n              </li>\n            })\n          : \"loading...\"}\n          </ol>\n      </div>\n      <div>\n        <PostCommentComp post={post} selected={selected} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { POST_COMMENT, GET_COMMENT } from \"../sharedFunctions/types\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport { blog, getSelectedData } from \"../sharedFunctions/helper\";\nimport { BlogComponent } from \"../components/shared/blog\";\nimport Comment from \"../components/shared/comment\";\nimport Popover from \"react-text-selection-popover\";\nimport Button from \"../components/shared/button\";\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selected: \"\"\n    };\n    this.refParagraph = React.createRef();\n    this.refCode = React.createRef();\n  }\n\n  postComment = (comment, selected) => {\n    this.props.postComment(comment, selected);\n  };\n\n  componentDidMount() {\n    this.props.getComments();\n  }\n\n  isMenuOpen = state => {\n    this.setState({\n      open: state.isOpen,\n      selected: getSelectedData(window.getSelection())\n    });\n    return state.isOpen;\n  };\n\n  render() {\n    const { comments } = this.props;\n    const { selected } = this.state;\n    return (\n      <div className=\"row\">\n        <Popover selectionRef={this.refParagraph}>\n          <h3\n            style={{\n              background: \"rgb(245,245,252)\",\n              color: \"#000\",\n              width: \"100%\"\n            }}\n          >\n            <Button\n              onClickFunction={() => this.setState({ open: true })}\n              label=\"Comment over this text\"\n            />\n          </h3>\n        </Popover>\n        <div className=\"col-md-12\">\n          <Menu\n            onStateChange={this.isMenuOpen}\n            disableAutoFocus\n            id={\"sidebar\"}\n            className={\"my-menu\"}\n            disableCloseOnEsc\n            noOverlay\n            width={\"40%\"}\n            customBurgerIcon={false}\n            elastic\n            isOpen={this.state.open}\n            left\n          >\n            <h2>Scroll to see your comments</h2>\n            <Comment\n              selected={selected}\n              comments={comments}\n              post={this.postComment}\n            />\n          </Menu>\n          <div className=\"container\">\n            <div\n              ref={this.refParagraph}\n              contentEditable\n              suppressContentEditableWarning\n              onInput={this.onChangeText}\n            >\n              <BlogComponent blog={blog} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loading: state.CommentingReducer.loading,\n    comments: state.CommentingReducer.comments,\n    shouldUpdate: state.CommentingReducer.shouldUpdate\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postComment: (comment, selected) => dispatch({ type: POST_COMMENT, comment, selected }),\n    getComments: () => dispatch({ type: GET_COMMENT })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\n","const config = {\n    apiKey: \"AIzaSyBPffk-2ivDegbE9gvxn8NAh1rxmUgUQmA\",\n    authDomain: \"my-project-1474004961753.firebaseapp.com\",\n    databaseURL: \"https://my-project-1474004961753.firebaseio.com\",\n    projectId: \"my-project-1474004961753\",\n    storageBucket: \"my-project-1474004961753.appspot.com\",\n    messagingSenderId: \"965385099790\",\n    appId: \"1:965385099790:web:7c30f9e3135c42bfefba5f\",\n    measurementId: \"G-2GN3F580TN\"\n  };\n  \n  export default config;\n  ","import {\n    put,\n    takeLatest\n} from 'redux-saga/effects';\nimport {\n    POST_COMMENT,\n    POST_COMMENT_ASYNC,\n    GET_COMMENT,\n    GET_COMMENT_ASYNC\n} from '../sharedFunctions/types';\nimport Firebase from \"firebase\";\nimport config from '../sharedFunctions/config'\n\nconst firebase = Firebase.initializeApp(config);\nconst db = firebase.firestore();\n\n\nfunction* postCommentAsync({comment, selected}) {\n    db.collection('comment').add({\n        body: comment,\n        selected: selected ? selected : 'selected'\n    });\n    yield put({\n        type: POST_COMMENT_ASYNC,\n        comment,\n        selected\n    });\n}\n\n\nfunction* postComment() {\n    yield takeLatest(POST_COMMENT, postCommentAsync);\n}\n\nfunction* getCommentAsync() {\n let result = [];\n    yield db.collection(\"comment\").get().then((querySnapshot) => {\n querySnapshot.forEach((doc) => {\n            result.push(doc.data());\n                });\n    })\n    yield put({\n        type: GET_COMMENT_ASYNC,\n        result\n    });\n}\n\n\nfunction* getComments() {\n    yield takeLatest(GET_COMMENT, getCommentAsync);\n}\n\n\nexport {\n    postComment, \n    getComments\n};","import { all } from 'redux-saga/effects';\nimport {  postComment, getComments } from './comment.saga';\n\nexport default function* rootSaga() {\n    yield all([\n        postComment(),\n        getComments()\n    ])\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport rootReducer from \"./reducers\";\nimport HomePage from \"./containers\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport rootSaga from './sagas/index';\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [];\nconst enhancers = [];\nmiddleware.push(sagaMiddleware);\nenhancers.push(applyMiddleware(...middleware));\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\nconst store = createStore(persistedReducer, compose(...enhancers));\nconst persistor = persistStore(store)\nconst rootElement = document.getElementById(\"root\");\nsagaMiddleware.run(rootSaga);\n\n\nrender(\n  <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        </Switch>\n      </BrowserRouter>\n      </PersistGate>\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}